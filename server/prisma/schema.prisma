// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  DEVELOPER
  SUPER_ADMIN
}

model User {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  username       String @unique
  phone          String @unique
  hashedPassword String
  role           Role   @default(USER)
  isPaid         Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  refreshTokens         RefreshToken[]
  examAttempts          UserExamAttempt[]
  // CHANGE: Add relation to exercise attempts
  exerciseAttempts      UserExerciseAttempt[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  jti       String   @unique
  revoked   Boolean  @default(false)
  expiresAt DateTime

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("refresh_tokens")
}

model Exam {
  id         String            @id @default(auto()) @map("_id") @db.ObjectId
  examNumber Int               @unique
  title      String
  isFree     Boolean           @default(true)
  questions  Question[]
  attempts   UserExamAttempt[]

  @@map("exams")
}

model Question {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  text               String
  options            String[]
  correctAnswerIndex Int

  examId String @db.ObjectId
  exam   Exam   @relation(fields: [examId], references: [id], onDelete: Cascade)

  @@map("questions")
}

model UserExamAttempt {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  score       Int?
  startedAt   DateTime  @default(now())
  completedAt DateTime?

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  examId String @db.ObjectId
  exam   Exam   @relation(fields: [examId], references: [id], onDelete: Cascade)

  answers Json

  @@map("user_exam_attempts")
}

model Exercise {
  id             String             @id @default(auto()) @map("_id") @db.ObjectId
  exerciseNumber Int                @unique
  title          String
  isFree         Boolean            @default(true)
  questions      ExerciseQuestion[]
  // CHANGE: Add relation to exercise attempts
  attempts       UserExerciseAttempt[]

  @@map("exercises")
}

model ExerciseQuestion {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  text               String
  options            String[]
  correctAnswerIndex Int
  hint               String?

  exerciseId String   @db.ObjectId
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@map("exercise_questions")
}

// --- NEW MODELS FOR TRACKING EXERCISE ATTEMPTS AND ANSWERS ---

model UserExerciseAttempt {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  score       Int?
  startedAt   DateTime  @default(now())
  completedAt DateTime?

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  exerciseId String   @db.ObjectId
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  answers ExerciseAnswer[]

  @@map("user_exercise_attempts")
}

model ExerciseAnswer {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  questionId          String   @db.ObjectId
  selectedOptionIndex Int
  isCorrect           Boolean
  submittedAt         DateTime @default(now())

  attemptId String              @db.ObjectId
  attempt   UserExerciseAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)

  @@map("exercise_answers")
}